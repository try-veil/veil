version: "3.8"

services:
  # FusionAuth Database
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: fusionauth
      POSTGRES_PASSWORD: fusionauth_password
      POSTGRES_DB: fusionauth
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - fusionauth

  # FusionAuth Search Engine
  search:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    environment:
      - cluster.name=fusionauth
      - node.name=search
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - action.destructive_requires_name=false
    volumes:
      - search_data:/usr/share/elasticsearch/data
    networks:
      - fusionauth

  # FusionAuth
  fusionauth:
    image: fusionauth/fusionauth-app:latest
    depends_on:
      - postgres
      - search
    environment:
      DATABASE_URL: jdbc:postgresql://postgres:5432/fusionauth
      DATABASE_USERNAME: fusionauth
      DATABASE_PASSWORD: fusionauth_password
      FUSIONAUTH_APP_MEMORY: 512M
      FUSIONAUTH_APP_RUNTIME_MODE: development
      SEARCH_TYPE: elasticsearch
      SEARCH_SERVERS: http://search:9200
      FUSIONAUTH_APP_URL: http://fusionauth:9011
      FUSIONAUTH_APP_KICKSTART_FILE: /usr/local/fusionauth/kickstart/kickstart.json
    ports:
      - "9011:9011"
    volumes:
      - fusionauth_config:/usr/local/fusionauth/config
      - ./fusionauth-kickstart.json:/usr/local/fusionauth/kickstart/kickstart.json
    networks:
      - fusionauth
      - grafana

  # Grafana
  grafana:
    image: grafana/grafana:latest
    depends_on:
      - fusionauth
    environment:
      # Basic Grafana settings
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123

      # OIDC Configuration
      GF_AUTH_GENERIC_OAUTH_ENABLED: "true"
      GF_AUTH_GENERIC_OAUTH_NAME: "FusionAuth"
      GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP: "true"
      GF_AUTH_GENERIC_OAUTH_CLIENT_ID: "85a03867-dccf-4882-adde-1a79aeec50df"
      GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET: "super-secret-client-secret-that-is-long-enough"
      GF_AUTH_GENERIC_OAUTH_SCOPES: "openid profile email"
      GF_AUTH_GENERIC_OAUTH_AUTH_URL: "http://localhost:9011/oauth2/authorize"
      GF_AUTH_GENERIC_OAUTH_TOKEN_URL: "http://fusionauth:9011/oauth2/token"
      GF_AUTH_GENERIC_OAUTH_API_URL: "http://fusionauth:9011/oauth2/userinfo"
      GF_AUTH_GENERIC_OAUTH_USE_PKCE: "true"
      GF_AUTH_GENERIC_OAUTH_AUTO_LOGIN: "false"

      # Keep login form but hide it after successful OAuth setup
      GF_AUTH_DISABLE_LOGIN_FORM: "true"
      GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_MAP: "grafana-admin:Admin, grafana-editor:Editor, grafana-viewer:Viewer"
      GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH: "contains(roles[*], 'grafana-admin') && 'Admin' || contains(roles[*], 'grafana-editor') && 'Editor' || 'Viewer'"

      # Enable debug logging for OAuth
      GF_LOG_LEVEL: "debug"

      # Organization settings
      GF_AUTH_GENERIC_OAUTH_AUTO_ASSIGN_ORG: "true"
      GF_AUTH_GENERIC_OAUTH_AUTO_ASSIGN_ORG_ID: "1"
      GF_AUTH_GENERIC_OAUTH_AUTO_ASSIGN_ORG_ROLE: "Viewer"

      # Provisioning configuration
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      # Mount provisioning files
      - ./provisioning:/etc/grafana/provisioning
      # Mount common dashboards directory
      - ./dashboards/common:/var/lib/grafana/common-dashboards
    networks:
      - grafana

  # Grafana Initialization - Creates service account and token
  grafana-init:
    build:
      context: ./scripts
      dockerfile: Dockerfile
    depends_on:
      - grafana
    volumes:
      - shared_data:/shared
    networks:
      - grafana
    restart: "no"

  # Webhook Service for Private Folder Creation
  webhook-service:
    build:
      context: ./webhook-service
      dockerfile: Dockerfile
    depends_on:
      - grafana
    environment:
      - GRAFANA_API_URL=http://grafana:3000
      - WEBHOOK_PORT=3001
    ports:
      - "3001:3001"
    networks:
      - grafana
    restart: unless-stopped

networks:
  fusionauth:
    driver: bridge
  grafana:
    driver: bridge

volumes:
  postgres_data:
  search_data:
  fusionauth_config:
  grafana_data:
  shared_data:
