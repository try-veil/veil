{
  "openapi": "3.0.0",
  "paths": {
    "/tenants": {
      "post": {
        "operationId": "TenantController_createTenant",
        "summary": "Create a new tenant",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Tenant created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden resource"
          }
        },
        "tags": [
          "tenants"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "TenantController_getAllTenants",
        "summary": "Get all tenants",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns all tenants",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantResponseDto"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden resource"
          }
        },
        "tags": [
          "tenants"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/tenants/{id}": {
      "get": {
        "operationId": "TenantController_getTenantById",
        "summary": "Get a tenant by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Tenant ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the tenant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden resource"
          },
          "404": {
            "description": "Tenant not found"
          }
        },
        "tags": [
          "tenants"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "TenantController_updateTenant",
        "summary": "Update a tenant",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Tenant ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden resource"
          },
          "404": {
            "description": "Tenant not found"
          }
        },
        "tags": [
          "tenants"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "TenantController_deleteTenant",
        "summary": "Delete a tenant",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Tenant ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Tenant deleted successfully"
          },
          "403": {
            "description": "Forbidden resource"
          },
          "404": {
            "description": "Tenant not found"
          }
        },
        "tags": [
          "tenants"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/tenants/by-domain/{domain}": {
      "get": {
        "operationId": "TenantController_getTenantByDomain",
        "summary": "Get a tenant by domain",
        "parameters": [
          {
            "name": "domain",
            "required": true,
            "in": "path",
            "description": "Tenant domain",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the tenant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden resource"
          },
          "404": {
            "description": "Tenant not found"
          }
        },
        "tags": [
          "tenants"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/internal/wallet": {
      "post": {
        "operationId": "WalletController_createWallet",
        "summary": "Create a new wallet for a user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWalletDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Wallet created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "wallet_id": {
                      "type": "string"
                    },
                    "credit_balance": {
                      "type": "number"
                    },
                    "status": {
                      "type": "string"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "Wallet already exists"
          }
        },
        "tags": [
          "wallet"
        ]
      }
    },
    "/internal/wallet/balance/{walletId}": {
      "get": {
        "operationId": "WalletController_getBalance",
        "summary": "Get the balance for a wallet",
        "parameters": [
          {
            "name": "walletId",
            "required": true,
            "in": "path",
            "description": "The wallet ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the wallet balance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletBalanceResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Wallet not found"
          }
        },
        "tags": [
          "wallet"
        ]
      }
    },
    "/internal/wallet/{walletId}/credits/add": {
      "post": {
        "operationId": "WalletController_addCredits",
        "summary": "Add credits to a wallet",
        "parameters": [
          {
            "name": "walletId",
            "required": true,
            "in": "path",
            "description": "The wallet ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCreditsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Credits added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_id": {
                      "type": "string"
                    },
                    "previous_balance": {
                      "type": "number"
                    },
                    "added_amount": {
                      "type": "number"
                    },
                    "current_balance": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Wallet not found"
          }
        },
        "tags": [
          "wallet"
        ]
      }
    },
    "/internal/wallet/{walletId}/credits/deduct": {
      "post": {
        "operationId": "WalletController_deductCredits",
        "summary": "Deduct credits from a wallet",
        "parameters": [
          {
            "name": "walletId",
            "required": true,
            "in": "path",
            "description": "The wallet ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeductCreditsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Credits deducted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_id": {
                      "type": "string"
                    },
                    "previous_balance": {
                      "type": "number"
                    },
                    "deducted_amount": {
                      "type": "number"
                    },
                    "current_balance": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request or insufficient credits"
          },
          "404": {
            "description": "Wallet not found"
          }
        },
        "tags": [
          "wallet"
        ]
      }
    },
    "/internal/wallet/{walletId}/transactions": {
      "get": {
        "operationId": "WalletController_getTransactions",
        "summary": "Get transaction history for a wallet",
        "parameters": [
          {
            "name": "walletId",
            "required": true,
            "in": "path",
            "description": "The wallet ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of transactions to return",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Offset for pagination",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by transaction type (credit or debit)",
            "schema": {
              "enum": [
                "credit",
                "debit"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns transaction history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transactions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "transaction_id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "CREDIT",
                              "DEBIT"
                            ]
                          },
                          "amount": {
                            "type": "number"
                          },
                          "description": {
                            "type": "string"
                          },
                          "reference_id": {
                            "type": "string"
                          },
                          "timestamp": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    },
                    "total": {
                      "type": "number"
                    },
                    "limit": {
                      "type": "number"
                    },
                    "offset": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Wallet not found"
          }
        },
        "tags": [
          "wallet"
        ]
      }
    },
    "/internal/wallet/check": {
      "get": {
        "operationId": "WalletController_checkCredits",
        "summary": "Check if a wallet has sufficient credits",
        "parameters": [
          {
            "name": "api_key",
            "required": true,
            "in": "query",
            "description": "API key associated with the wallet",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "amount",
            "required": false,
            "in": "query",
            "description": "Amount of credits to check",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns credit check result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "has_sufficient_credits": {
                      "type": "boolean"
                    },
                    "current_balance": {
                      "type": "number"
                    },
                    "required_amount": {
                      "type": "number"
                    },
                    "remaining_if_used": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Invalid API key"
          }
        },
        "tags": [
          "wallet"
        ]
      }
    },
    "/internal/payment/process": {
      "post": {
        "operationId": "PaymentController_processPayment",
        "summary": "Process a payment and add credits to wallet",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessPaymentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "payment_id": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "number"
                    },
                    "credits_added": {
                      "type": "number"
                    },
                    "processed_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Wallet not found"
          }
        },
        "tags": [
          "payment"
        ]
      }
    },
    "/internal/payment/{paymentId}": {
      "get": {
        "operationId": "PaymentController_getPayment",
        "summary": "Get payment details",
        "parameters": [
          {
            "name": "paymentId",
            "required": true,
            "in": "path",
            "description": "The payment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns payment details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "payment_id": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "number"
                    },
                    "currency": {
                      "type": "string"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "processed_at": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "error_message": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Payment not found"
          }
        },
        "tags": [
          "payment"
        ]
      }
    },
    "/internal/payment/{paymentId}/attempts": {
      "get": {
        "operationId": "PaymentController_getPaymentAttempts",
        "summary": "Get payment attempt history",
        "parameters": [
          {
            "name": "paymentId",
            "required": true,
            "in": "path",
            "description": "The payment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns payment attempt history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "payment_id": {
                      "type": "string"
                    },
                    "attempts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "attempt_id": {
                            "type": "string"
                          },
                          "attempt_number": {
                            "type": "number"
                          },
                          "status": {
                            "type": "string"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "error_message": {
                            "type": "string",
                            "nullable": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Payment not found"
          }
        },
        "tags": [
          "payment"
        ]
      }
    },
    "/internal/payment/{paymentId}/refund": {
      "post": {
        "operationId": "PaymentController_refundPayment",
        "summary": "Refund a payment and deduct credits from wallet",
        "parameters": [
          {
            "name": "paymentId",
            "required": true,
            "in": "path",
            "description": "The payment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundPaymentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment refunded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "payment_id": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "refunded_amount": {
                      "type": "number"
                    },
                    "refunded_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Payment not found"
          }
        },
        "tags": [
          "payment"
        ]
      }
    },
    "/credits/{userId}": {
      "get": {
        "operationId": "CreditController_getCreditBalance",
        "summary": "Get credit balance for a user",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the credit balance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditBalanceResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "credits"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/credits/{userId}/check": {
      "post": {
        "operationId": "CreditController_checkCredits",
        "summary": "Check if user has sufficient credits",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckCreditsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns whether user has sufficient credits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckCreditsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid amount"
          }
        },
        "tags": [
          "credits"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/credits/{userId}/deduct": {
      "post": {
        "operationId": "CreditController_deductCredits",
        "summary": "Deduct credits from user",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeductCreditsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Credits deducted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditBalanceDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          }
        },
        "tags": [
          "credits"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/credits/{userId}/add": {
      "post": {
        "operationId": "CreditController_addCredits",
        "summary": "Add credits to user",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCreditsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Credits added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditBalanceDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          }
        },
        "tags": [
          "credits"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/credits/{userId}/generate-api-key": {
      "post": {
        "operationId": "CreditController_generateApiKey",
        "summary": "Generate API key and deduct credits",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateApiKeyRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "API key generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateApiKeyResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or insufficient credits"
          }
        },
        "tags": [
          "credits"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/credits/{userId}/purchase": {
      "post": {
        "operationId": "CreditController_purchaseCredits",
        "summary": "Purchase credits",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseCreditsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Credits purchased successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseCreditsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          }
        },
        "tags": [
          "credits"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/subscriptions/{userId}": {
      "post": {
        "operationId": "SubscriptionController_create",
        "summary": "Create a new subscription",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriptionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Subscription created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          }
        },
        "tags": [
          "subscriptions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "SubscriptionController_listSubscriptions",
        "summary": "List subscriptions for a user",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "ACTIVE",
                "INACTIVE",
                "SUSPENDED",
                "EXPIRED",
                "CANCELLED"
              ],
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of subscriptions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionListResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "subscriptions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/subscriptions/{userId}/{subscriptionId}": {
      "get": {
        "operationId": "SubscriptionController_findById",
        "summary": "Get subscription by ID",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriptionId",
            "required": true,
            "in": "path",
            "description": "Subscription ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the subscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Subscription not found"
          }
        },
        "tags": [
          "subscriptions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "SubscriptionController_update",
        "summary": "Update subscription",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriptionId",
            "required": true,
            "in": "path",
            "description": "Subscription ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscriptionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Subscription not found"
          }
        },
        "tags": [
          "subscriptions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/subscriptions/{userId}/tenant/{tenantId}": {
      "get": {
        "operationId": "SubscriptionController_findByTenantId",
        "summary": "Get active subscription by tenant ID",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "required": true,
            "in": "path",
            "description": "Tenant ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the active subscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "No active subscription found"
          }
        },
        "tags": [
          "subscriptions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/subscriptions/{userId}/{subscriptionId}/details": {
      "get": {
        "operationId": "SubscriptionController_getSubscriptionDetails",
        "summary": "Get detailed subscription information",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriptionId",
            "required": true,
            "in": "path",
            "description": "Subscription ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns detailed subscription information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionDetailsResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Subscription not found"
          }
        },
        "tags": [
          "subscriptions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/subscriptions/{userId}/{subscriptionId}/deactivate": {
      "patch": {
        "operationId": "SubscriptionController_deactivate",
        "summary": "Deactivate subscription",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriptionId",
            "required": true,
            "in": "path",
            "description": "Subscription ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription deactivated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Subscription not found"
          }
        },
        "tags": [
          "subscriptions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/subscriptions/{userId}/{subscriptionId}/regenerate-key": {
      "patch": {
        "operationId": "SubscriptionController_regenerateApiKey",
        "summary": "Regenerate API key for subscription",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriptionId",
            "required": true,
            "in": "path",
            "description": "Subscription ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API key regenerated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Subscription not found"
          }
        },
        "tags": [
          "subscriptions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/subscriptions/{userId}/{subscriptionId}/cancel": {
      "delete": {
        "operationId": "SubscriptionController_cancelSubscription",
        "summary": "Cancel subscription",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriptionId",
            "required": true,
            "in": "path",
            "description": "Subscription ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription cancelled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionCancellationResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Subscription not found"
          }
        },
        "tags": [
          "subscriptions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/onboard": {
      "put": {
        "operationId": "OnboardingController_registerApi",
        "summary": "Register a new API",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiRegistrationRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "API registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRegistrationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden - requires provider role"
          }
        },
        "tags": [
          "onboarding"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/onboard/api/{apiId}": {
      "get": {
        "operationId": "OnboardingController_getApiDetails",
        "summary": "Get API details",
        "parameters": [
          {
            "name": "apiId",
            "required": true,
            "in": "path",
            "description": "API ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns API details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDetailsResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "API not found"
          }
        },
        "tags": [
          "onboarding"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "OnboardingController_updateApi",
        "summary": "Update an API",
        "parameters": [
          {
            "name": "apiId",
            "required": true,
            "in": "path",
            "description": "API ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiRegistrationRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "API updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDetailsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden - requires provider role"
          },
          "404": {
            "description": "API not found"
          }
        },
        "tags": [
          "onboarding"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "OnboardingController_deleteApi",
        "summary": "Delete an API",
        "parameters": [
          {
            "name": "apiId",
            "required": true,
            "in": "path",
            "description": "API ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API deleted successfully"
          },
          "403": {
            "description": "Forbidden - requires provider role"
          },
          "404": {
            "description": "API not found"
          }
        },
        "tags": [
          "onboarding"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/onboard/test": {
      "post": {
        "operationId": "OnboardingController_testApi",
        "summary": "Test an onboarded API endpoint with rate limiting",
        "description": "Test an API that has already been onboarded to the gateway. Use existing API ID and path from your onboarded APIs. Rate limited to 5 requests per 5 hours per API.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiRegistrationRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "API test successful - returns response from the upstream API",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "example": {
                        "service": "weather",
                        "temperature": 25,
                        "conditions": "sunny",
                        "location": "New York"
                      }
                    },
                    "status": {
                      "type": "number",
                      "example": 200
                    },
                    "headers": {
                      "type": "object",
                      "example": {
                        "content-type": "application/json"
                      }
                    },
                    "usage": {
                      "type": "number",
                      "example": 1
                    },
                    "limit": {
                      "type": "number",
                      "example": 5
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing required fields or API not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "api_id, path, and target_url are required"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Rate limit exceeded - maximum 5 requests per 5 hours per API",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Test API rate limit exceeded for test key. Limit: 5 requests per 5 hours"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "onboarding"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/plans": {
      "post": {
        "operationId": "PlanController_create",
        "summary": "Create a new plan",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePlanDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Plan created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "Plan name already exists"
          }
        },
        "tags": [
          "plans"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "PlanController_findAll",
        "summary": "Get all plans",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all plans",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "plans"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/plans/{id}": {
      "get": {
        "operationId": "PlanController_findById",
        "summary": "Get a plan by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Plan not found"
          }
        },
        "tags": [
          "plans"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "PlanController_update",
        "summary": "Update a plan",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlanDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Plan updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Plan not found"
          },
          "409": {
            "description": "Plan name already exists"
          }
        },
        "tags": [
          "plans"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "PlanController_delete",
        "summary": "Delete a plan",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Plan deleted successfully"
          },
          "404": {
            "description": "Plan not found"
          },
          "409": {
            "description": "Cannot delete plan with active subscriptions"
          }
        },
        "tags": [
          "plans"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/projects": {
      "post": {
        "operationId": "ProjectController_create",
        "summary": "Create a new project",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        },
        "tags": [
          "projects"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "ProjectController_findAll",
        "summary": "Get all projects for the current user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns all projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "projects"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/projects/marketplace": {
      "get": {
        "operationId": "ProjectController_findAllForConsumer",
        "summary": "Get all available projects for marketplace",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns all available projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "projects"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/projects/marketplace/{id}": {
      "get": {
        "operationId": "ProjectController_findOneForConsumer",
        "summary": "Get a specific project for marketplace",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectWithRelationsDto"
                }
              }
            }
          },
          "404": {
            "description": "Project not found"
          }
        },
        "tags": [
          "projects"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/projects/marketplace/{id}/apis": {
      "get": {
        "operationId": "ProjectController_getMarketplaceProjectApis",
        "summary": "Get all APIs under a marketplace project",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all APIs in the marketplace project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectApiDetailsDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found"
          }
        },
        "tags": [
          "projects"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/projects/{id}": {
      "get": {
        "operationId": "ProjectController_findOne",
        "summary": "Get a project by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectWithRelationsDto"
                }
              }
            }
          },
          "404": {
            "description": "Project not found"
          }
        },
        "tags": [
          "projects"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "ProjectController_update",
        "summary": "Update a project",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Project not found"
          }
        },
        "tags": [
          "projects"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ProjectController_remove",
        "summary": "Delete a project",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Project deleted successfully"
          },
          "404": {
            "description": "Project not found"
          }
        },
        "tags": [
          "projects"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/projects/{id}/apis": {
      "get": {
        "operationId": "ProjectController_getProjectApis",
        "summary": "Get all APIs under a project with full details",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all APIs in the project with full details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectApiDetailsDto"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access denied to project"
          },
          "404": {
            "description": "Project not found"
          }
        },
        "tags": [
          "projects"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ProjectController_addApiToProject",
        "summary": "Add an API to a project",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectAllowedApiDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "API added to project successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Project or API not found"
          }
        },
        "tags": [
          "projects"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/projects/{id}/apis/{apiId}": {
      "delete": {
        "operationId": "ProjectController_removeApiFromProject",
        "summary": "Remove an API from a project",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "apiId",
            "required": true,
            "in": "path",
            "description": "API ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "API removed from project successfully"
          },
          "404": {
            "description": "Project or API not found"
          }
        },
        "tags": [
          "projects"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hublistings": {
      "post": {
        "operationId": "HubListingController_create",
        "summary": "Register a new API in Hub Listing",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HubListingDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "API registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HubListingDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden - requires provider role"
          }
        },
        "tags": [
          "hublistings"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "HubListingController_findAll",
        "summary": "Get all hub listings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all hub listings"
          }
        },
        "tags": [
          "hublistings"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hublistings/{id}": {
      "get": {
        "operationId": "HubListingController_findOne",
        "summary": "Get a single hub listing by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hub listing found"
          },
          "404": {
            "description": "Hub listing not found"
          }
        },
        "tags": [
          "hublistings"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "HubListingController_update",
        "summary": "Update a hub listing",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HubListingDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Hub listing updated"
          },
          "404": {
            "description": "Hub listing not found"
          }
        },
        "tags": [
          "hublistings"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "HubListingController_remove",
        "summary": "Delete a hub listing",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hub listing deleted"
          },
          "404": {
            "description": "Hub listing not found"
          }
        },
        "tags": [
          "hublistings"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/me": {
      "get": {
        "operationId": "UserController_getCurrentUser",
        "summary": "Get the current authenticated user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns the current user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "UserController_updateCurrentUser",
        "summary": "Update the current authenticated user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "description": "First name"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "Last name"
                  },
                  "email": {
                    "type": "string",
                    "description": "Email address"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "UserController_getUser",
        "summary": "Get a user by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        },
        "tags": [
          "users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/{id}/attributes/{name}": {
      "put": {
        "operationId": "UserController_updateUserAttribute",
        "summary": "Update a user attribute",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "description": "Attribute name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "Attribute value"
                  }
                },
                "required": [
                  "value"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Attribute updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/{id}/metadata/{name}": {
      "put": {
        "operationId": "UserController_updateMetadataAttribute",
        "summary": "Update a user metadata attribute",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "description": "Metadata attribute name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "Metadata attribute value"
                  }
                },
                "required": [
                  "value"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Metadata updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/marketplace/apis": {
      "get": {
        "operationId": "MarketplaceController_getMarketplaceApis",
        "summary": "Get all marketplace APIs",
        "description": "Retrieve all publicly available APIs with filtering, search, and pagination support",
        "parameters": [
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "Filter by category",
            "schema": {
              "example": "ai",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term for API name or description",
            "schema": {
              "example": "weather",
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "enum": [
                "popularity",
                "name",
                "created_at",
                "updated_at"
              ],
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (max 100)",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns paginated list of marketplace APIs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketplaceApiListResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid query parameters"
          }
        },
        "tags": [
          "marketplace"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/marketplace/apis/{apiId}": {
      "get": {
        "operationId": "MarketplaceController_getMarketplaceApiDetails",
        "summary": "Get API details for marketplace",
        "description": "Retrieve detailed information about a specific API including headers, parameters, and pricing",
        "parameters": [
          {
            "name": "apiId",
            "required": true,
            "in": "path",
            "description": "API identifier",
            "schema": {
              "example": "weather-api-v1",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns detailed API information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketplaceApiDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "API not found or not publicly available"
          }
        },
        "tags": [
          "marketplace"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/marketplace/categories": {
      "get": {
        "operationId": "MarketplaceController_getCategories",
        "summary": "Get API categories",
        "description": "Retrieve all available API categories with API counts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns list of available categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MarketplaceCategoryDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "marketplace"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/marketplace/search": {
      "get": {
        "operationId": "MarketplaceController_searchApis",
        "summary": "Search APIs",
        "description": "Search for APIs by name, description, or other criteria",
        "parameters": [
          {
            "name": "q",
            "required": true,
            "in": "query",
            "description": "Search query",
            "schema": {
              "example": "weather",
              "type": "string"
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "Filter by category",
            "schema": {
              "example": "data",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (max 100)",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketplaceApiListResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing or invalid search query"
          }
        },
        "tags": [
          "marketplace"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "Veil API",
    "description": "The Veil API documentation",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "ProjectResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Project ID"
          },
          "name": {
            "type": "string",
            "description": "Project name",
            "example": "My API Project"
          },
          "description": {
            "type": "string",
            "description": "Project description",
            "example": "Project for managing my APIs"
          },
          "target_url": {
            "type": "string",
            "description": "Target Url",
            "example": "https://jsonplaceholder.typicode.com/posts"
          },
          "thumbnail": {
            "type": "string",
            "description": "Project thumbnail URL",
            "example": "https://example.com/image.png"
          },
          "favorite": {
            "type": "boolean",
            "description": "Mark project as favorite",
            "default": false
          },
          "mashapeId": {
            "type": "string",
            "description": "Mashape ID for legacy projects"
          },
          "xMashapeKey": {
            "type": "string",
            "description": "X-Mashape-Key for legacy authentication"
          },
          "enableLimitsToAPIs": {
            "type": "boolean",
            "description": "Enable limits to APIs",
            "default": false
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID",
            "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479"
          }
        },
        "required": [
          "id",
          "name",
          "favorite",
          "enableLimitsToAPIs",
          "createdAt",
          "updatedAt",
          "tenantId"
        ]
      },
      "TenantResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "name": {
            "type": "string",
            "description": "Tenant name"
          },
          "domain": {
            "type": "string",
            "description": "Tenant domain"
          },
          "slugifiedKey": {
            "type": "string",
            "description": "Slugified key for the tenant"
          },
          "projects": {
            "description": "Projects under this tenant",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectResponseDto"
            }
          }
        },
        "required": [
          "id",
          "name",
          "domain",
          "slugifiedKey",
          "projects"
        ]
      },
      "CreateWalletDto": {
        "type": "object",
        "properties": {}
      },
      "WalletBalanceResponseDto": {
        "type": "object",
        "properties": {}
      },
      "AddCreditsDto": {
        "type": "object",
        "properties": {}
      },
      "DeductCreditsDto": {
        "type": "object",
        "properties": {}
      },
      "ProcessPaymentDto": {
        "type": "object",
        "properties": {}
      },
      "RefundPaymentDto": {
        "type": "object",
        "properties": {}
      },
      "CreditUsageDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the credit usage",
            "example": "1234-5678-90ab-cdef"
          },
          "userId": {
            "type": "string",
            "description": "User ID",
            "example": "user-123"
          },
          "amount": {
            "type": "number",
            "description": "Amount of credits used",
            "example": 100
          },
          "type": {
            "type": "string",
            "description": "Type of credit usage",
            "enum": [
              "API_CALL",
              "FEATURE_USAGE",
              "MANUAL_ADJUSTMENT"
            ],
            "example": "API_CALL"
          },
          "endpointId": {
            "type": "string",
            "description": "Endpoint ID if applicable",
            "example": "endpoint-123"
          },
          "featureId": {
            "type": "string",
            "description": "Feature ID if applicable",
            "example": "feature-123"
          },
          "description": {
            "type": "string",
            "description": "Description of the usage",
            "example": "OpenAI API call"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the credit usage",
            "example": {
              "apiName": "openai",
              "modelName": "gpt-4"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the credits were used",
            "example": "2023-01-01T12:00:00Z"
          }
        },
        "required": [
          "id",
          "userId",
          "amount",
          "type",
          "createdAt"
        ]
      },
      "CreditBalanceResponseDto": {
        "type": "object",
        "properties": {
          "balance": {
            "type": "number",
            "description": "Current credit balance",
            "example": 1000
          },
          "status": {
            "type": "string",
            "description": "Status of the credit balance",
            "enum": [
              "ACTIVE",
              "SUSPENDED",
              "EXPIRED"
            ],
            "example": "ACTIVE"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the credits expire, if applicable",
            "example": "2024-01-01T12:00:00Z"
          },
          "recentUsage": {
            "description": "Recent credit usage",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditUsageDto"
            }
          }
        },
        "required": [
          "balance",
          "status",
          "recentUsage"
        ]
      },
      "CheckCreditsRequestDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Amount of credits to check",
            "example": 100
          }
        },
        "required": [
          "amount"
        ]
      },
      "CheckCreditsResponseDto": {
        "type": "object",
        "properties": {
          "hasSufficientCredits": {
            "type": "boolean",
            "description": "Whether the user has sufficient credits",
            "example": true
          }
        },
        "required": [
          "hasSufficientCredits"
        ]
      },
      "DeductCreditsRequestDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Amount of credits to deduct",
            "example": 100
          },
          "type": {
            "type": "string",
            "description": "Type of credit usage",
            "enum": [
              "API_CALL",
              "FEATURE_USAGE",
              "MANUAL_ADJUSTMENT"
            ],
            "example": "API_CALL"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the credit usage",
            "example": {
              "apiName": "openai",
              "modelName": "gpt-4"
            }
          }
        },
        "required": [
          "amount",
          "type"
        ]
      },
      "CreditBalanceDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the credit balance",
            "example": "balance-123"
          },
          "userId": {
            "type": "string",
            "description": "User ID",
            "example": "user-123"
          },
          "balance": {
            "type": "number",
            "description": "Current credit balance",
            "example": 1000
          },
          "status": {
            "type": "string",
            "description": "Status of the credit balance",
            "enum": [
              "ACTIVE",
              "SUSPENDED",
              "EXPIRED"
            ],
            "example": "ACTIVE"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the credits expire, if applicable",
            "example": "2024-01-01T12:00:00Z"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the credit balance was created",
            "example": "2023-01-01T12:00:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the credit balance was last updated",
            "example": "2023-01-01T12:00:00Z"
          }
        },
        "required": [
          "id",
          "userId",
          "balance",
          "status",
          "createdAt",
          "updatedAt"
        ]
      },
      "AddCreditsRequestDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Amount of credits to add",
            "example": 100
          },
          "reason": {
            "type": "string",
            "description": "Reason for adding credits",
            "example": "Monthly subscription"
          },
          "adjustedBy": {
            "type": "string",
            "description": "ID of user who is adjusting the credits",
            "example": "admin-123"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the credit addition",
            "example": {
              "subscriptionId": "sub-123"
            }
          }
        },
        "required": [
          "amount",
          "reason",
          "adjustedBy"
        ]
      },
      "GenerateApiKeyRequestDto": {
        "type": "object",
        "properties": {
          "creditCost": {
            "type": "number",
            "description": "Cost in credits to generate the API key",
            "example": 100
          },
          "keyName": {
            "type": "string",
            "description": "Name for the API key",
            "example": "My API Key"
          },
          "apiId": {
            "type": "string",
            "description": "API ID to associate with the key",
            "example": "api-123"
          },
          "projectId": {
            "type": "number",
            "description": "Project ID to associate with the key",
            "example": 1
          }
        },
        "required": [
          "creditCost"
        ]
      },
      "GenerateApiKeyResponseDto": {
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string",
            "description": "Generated API key",
            "example": "veil_1234567890abcdef"
          },
          "remainingCredits": {
            "type": "number",
            "description": "Remaining credits after deduction",
            "example": 900
          },
          "subscriptionId": {
            "type": "string",
            "description": "Subscription ID for the generated key",
            "example": "sub-123"
          }
        },
        "required": [
          "apiKey",
          "remainingCredits",
          "subscriptionId"
        ]
      },
      "PurchaseCreditsRequestDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Amount of credits to purchase",
            "example": 1000
          },
          "paymentMethodType": {
            "type": "string",
            "description": "Payment method type",
            "example": "CARD",
            "enum": [
              "CARD",
              "CREDITS",
              "ACH",
              "OFFLINE"
            ]
          },
          "paymentMethodId": {
            "type": "string",
            "description": "Payment method ID",
            "example": "pm_1234567890"
          },
          "currency": {
            "type": "string",
            "description": "Currency for the purchase",
            "example": "USD"
          }
        },
        "required": [
          "amount",
          "paymentMethodType"
        ]
      },
      "PurchaseCreditsResponseDto": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "Transaction ID",
            "example": "txn_1234567890"
          },
          "creditsAdded": {
            "type": "number",
            "description": "Credits added to account",
            "example": 1000
          },
          "newBalance": {
            "type": "number",
            "description": "New credit balance",
            "example": 1900
          },
          "paymentStatus": {
            "type": "string",
            "description": "Payment status",
            "example": "SUCCEEDED",
            "enum": [
              "PENDING",
              "PROCESSING",
              "SUCCEEDED",
              "FAILED"
            ]
          }
        },
        "required": [
          "transactionId",
          "creditsAdded",
          "newBalance",
          "paymentStatus"
        ]
      },
      "CreateSubscriptionDto": {
        "type": "object",
        "properties": {}
      },
      "SubscriptionResponseDto": {
        "type": "object",
        "properties": {}
      },
      "SubscriptionListResponseDto": {
        "type": "object",
        "properties": {}
      },
      "SubscriptionDetailsResponseDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateSubscriptionDto": {
        "type": "object",
        "properties": {}
      },
      "SubscriptionCancellationResponseDto": {
        "type": "object",
        "properties": {}
      },
      "HeaderParameterDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the header",
            "example": "X-Subscription-Key"
          },
          "value": {
            "type": "string",
            "description": "Value of the header",
            "example": "test-key-95714b01-c8c7-4fb1-9779-8de3ed66d9bf"
          },
          "is_variable": {
            "type": "boolean",
            "description": "Whether the value is a variable",
            "example": false
          }
        },
        "required": [
          "name",
          "value",
          "is_variable"
        ]
      },
      "ParameterDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the parameter",
            "example": "location"
          },
          "type": {
            "type": "string",
            "description": "Type of the parameter",
            "example": "string"
          },
          "required": {
            "type": "boolean",
            "description": "Whether the parameter is required",
            "example": false
          }
        },
        "required": [
          "name",
          "type",
          "required"
        ]
      },
      "ApiKeyDto": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "API key",
            "example": "test-key-95714b01-c8c7-4fb1-9779-8de3ed66d9bf"
          },
          "name": {
            "type": "string",
            "description": "Name of the API key",
            "example": "Weather API Test Key"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the API key is active",
            "example": true
          }
        },
        "required": [
          "key",
          "name",
          "is_active"
        ]
      },
      "QueryParameterDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Query parameter name",
            "example": "page"
          },
          "type": {
            "type": "string",
            "description": "Query parameter type",
            "example": "string"
          },
          "required": {
            "type": "boolean",
            "description": "Whether the query parameter is required",
            "example": false
          }
        },
        "required": [
          "name",
          "type",
          "required"
        ]
      },
      "MultipartFieldDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Field name",
            "example": "username"
          },
          "value": {
            "type": "string",
            "description": "Field value or example",
            "example": "john_doe"
          },
          "type": {
            "type": "string",
            "description": "Field type",
            "enum": [
              "text",
              "file"
            ],
            "example": "text"
          },
          "required": {
            "type": "boolean",
            "description": "Whether the field is required",
            "example": true
          },
          "description": {
            "type": "string",
            "description": "Human readable description of the field",
            "example": "User's username for login"
          },
          "content_type": {
            "type": "string",
            "description": "Content type for file fields",
            "example": "image/jpeg"
          }
        },
        "required": [
          "name",
          "value",
          "type",
          "required"
        ]
      },
      "BodyDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Body type",
            "enum": [
              "text",
              "json",
              "form-urlencoded",
              "multipart",
              "graphql"
            ],
            "example": "json"
          },
          "content": {
            "type": "string",
            "description": "Raw content for text/graphql"
          },
          "json_data": {
            "type": "object",
            "description": "JSON data object"
          },
          "form_data": {
            "description": "Form data array for form-urlencoded (key-value pairs)",
            "example": [
              {
                "key": "username",
                "value": "john_doe"
              }
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "multipart_data": {
            "description": "Multipart form fields",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MultipartFieldDto"
            }
          }
        },
        "required": [
          "type"
        ]
      },
      "ApiRegistrationRequestDto": {
        "type": "object",
        "properties": {
          "api_id": {
            "type": "string",
            "description": "Unique identifier for the API",
            "example": "95714b01-c8c7-4fb1-9779-8de3ed66d9bf"
          },
          "project_id": {
            "type": "number",
            "description": "Project ID that this API belongs to",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Display name of the API",
            "example": "Weather Service API"
          },
          "path": {
            "type": "string",
            "description": "Path for accessing the API",
            "example": "/95714b01-c8c7-4fb1-9779-8de3ed66d9bf/w2"
          },
          "target_url": {
            "type": "string",
            "description": "Target URL where the request will be forwarded",
            "example": "http://localhost:8083"
          },
          "method": {
            "type": "string",
            "description": "HTTP method for the API",
            "example": "GET"
          },
          "description": {
            "type": "string",
            "description": "Description of the API",
            "example": "Weather service providing current conditions and forecasts"
          },
          "documentation_url": {
            "type": "string",
            "description": "URL to the API documentation",
            "example": "https://docs.weatherapi.com"
          },
          "required_headers": {
            "description": "Required headers for the API",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HeaderParameterDto"
            }
          },
          "specification": {
            "type": "object",
            "description": "API specification (OpenAPI/Swagger)"
          },
          "version": {
            "type": "string",
            "description": "Version of the API",
            "example": "1.0.0"
          },
          "required_subscription": {
            "type": "string",
            "description": "Required subscription level",
            "example": "free"
          },
          "parameters": {
            "description": "Parameters for the API",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParameterDto"
            }
          },
          "api_keys": {
            "description": "API keys that can access this API",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiKeyDto"
            }
          },
          "query_params": {
            "description": "Query parameters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryParameterDto"
            }
          },
          "body": {
            "description": "Request body configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/BodyDto"
              }
            ]
          }
        },
        "required": [
          "api_id",
          "project_id",
          "name",
          "path",
          "target_url",
          "method",
          "version"
        ]
      },
      "ApiRegistrationResponseDto": {
        "type": "object",
        "properties": {
          "api_id": {
            "type": "string",
            "description": "Unique identifier for the API",
            "example": "payment-api-v1"
          },
          "status": {
            "type": "string",
            "description": "Status of the API registration",
            "example": "ACTIVE"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "When the API was created",
            "example": "2023-01-01T00:00:00Z"
          }
        },
        "required": [
          "api_id",
          "status",
          "created_at"
        ]
      },
      "ApiDetailsResponseDto": {
        "type": "object",
        "properties": {
          "api_id": {
            "type": "string",
            "description": "Unique identifier for the API",
            "example": "payment-api-v1"
          },
          "project_id": {
            "type": "number",
            "description": "Project ID that this API belongs to",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Display name of the API",
            "example": "Payment Processing API"
          },
          "path": {
            "type": "string",
            "description": "Path for accessing the API",
            "example": "/api/payments"
          },
          "target_url": {
            "type": "string",
            "description": "Target URL where the request will be forwarded",
            "example": "https://api.example.com/payments"
          },
          "method": {
            "type": "string",
            "description": "HTTP method for the API",
            "example": "POST"
          },
          "version": {
            "type": "string",
            "description": "Version of the API",
            "example": "1.0.0"
          },
          "description": {
            "type": "string",
            "description": "Description of the API",
            "example": "Process payment transactions"
          },
          "required_subscription": {
            "type": "string",
            "description": "Required subscription level",
            "example": "basic"
          },
          "documentation_url": {
            "type": "string",
            "description": "URL to the API documentation",
            "example": "https://docs.example.com/api/payments"
          },
          "required_headers": {
            "description": "Required headers for the API",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HeaderParameterDto"
            }
          },
          "api_key": {
            "type": "string",
            "description": "API key for accessing through gateway",
            "example": "pk_proxy_weather_test"
          },
          "status": {
            "type": "string",
            "description": "Status of the API",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "DEPRECATED"
            ],
            "example": "ACTIVE"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "When the API was created",
            "example": "2023-01-01T00:00:00Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "When the API was last updated",
            "example": "2023-01-01T00:00:00Z"
          },
          "parameters": {
            "description": "Parameters for the API",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParameterDto"
            }
          },
          "query_params": {
            "description": "Query parameters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryParameterDto"
            }
          },
          "body": {
            "description": "Request body configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/BodyDto"
              }
            ]
          }
        },
        "required": [
          "api_id",
          "project_id",
          "name",
          "path",
          "target_url",
          "method",
          "version",
          "required_headers",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "CreatePlanDto": {
        "type": "object",
        "properties": {}
      },
      "PlanResponseDto": {
        "type": "object",
        "properties": {}
      },
      "UpdatePlanDto": {
        "type": "object",
        "properties": {}
      },
      "CreateProjectDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Project name",
            "example": "My API Project"
          },
          "description": {
            "type": "string",
            "description": "Project description",
            "example": "Project for managing my APIs"
          },
          "target_url": {
            "type": "string",
            "description": "Target Url",
            "example": "https://jsonplaceholder.typicode.com/posts"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID",
            "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479"
          },
          "thumbnail": {
            "type": "string",
            "description": "Project thumbnail URL",
            "example": "https://example.com/image.png"
          },
          "favorite": {
            "type": "boolean",
            "description": "Mark project as favorite",
            "default": false
          },
          "enableLimitsToAPIs": {
            "type": "boolean",
            "description": "Enable limits to APIs",
            "default": false
          },
          "logo": {
            "type": "string",
            "description": "Logo URL for the project",
            "example": "https://example.com/logo.png"
          },
          "category": {
            "type": "string",
            "description": "Category of the project",
            "example": "Finance"
          },
          "website": {
            "type": "string",
            "description": "Website URL for the project",
            "example": "https://example.com"
          }
        },
        "required": [
          "name",
          "tenantId"
        ]
      },
      "ProjectAllowedApiDto": {
        "type": "object",
        "properties": {
          "apiId": {
            "type": "string",
            "description": "API ID"
          },
          "apiVersionId": {
            "type": "string",
            "description": "API version ID"
          }
        },
        "required": [
          "apiId",
          "apiVersionId"
        ]
      },
      "PlanConfig": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether the plan is enabled",
            "example": true
          },
          "pricePerMonth": {
            "type": "number",
            "description": "Monthly price in USD",
            "example": 29.99
          },
          "requestQuotaPerMonth": {
            "type": "number",
            "description": "Monthly request quota",
            "example": 100000
          },
          "hardLimitQuota": {
            "type": "number",
            "description": "Hard limit of requests per month",
            "example": 150000
          }
        },
        "required": [
          "enabled",
          "pricePerMonth",
          "requestQuotaPerMonth",
          "hardLimitQuota"
        ]
      },
      "ProjectWithRelationsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Project ID"
          },
          "name": {
            "type": "string",
            "description": "Project name",
            "example": "My API Project"
          },
          "description": {
            "type": "string",
            "description": "Project description",
            "example": "Project for managing my APIs"
          },
          "target_url": {
            "type": "string",
            "description": "Target Url",
            "example": "https://jsonplaceholder.typicode.com/posts"
          },
          "thumbnail": {
            "type": "string",
            "description": "Project thumbnail URL",
            "example": "https://example.com/image.png"
          },
          "favorite": {
            "type": "boolean",
            "description": "Mark project as favorite",
            "default": false
          },
          "mashapeId": {
            "type": "string",
            "description": "Mashape ID for legacy projects"
          },
          "xMashapeKey": {
            "type": "string",
            "description": "X-Mashape-Key for legacy authentication"
          },
          "enableLimitsToAPIs": {
            "type": "boolean",
            "description": "Enable limits to APIs",
            "default": false
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID",
            "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479"
          },
          "apis": {
            "description": "APIs allowed in this project",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectAllowedApiDto"
            }
          },
          "gateway_api_key": {
            "type": "string",
            "description": "API key for accessing APIs through the gateway",
            "example": "pk_proxy_weather_test"
          },
          "basicPlan": {
            "description": "Basic plan config",
            "allOf": [
              {
                "$ref": "#/components/schemas/PlanConfig"
              }
            ]
          },
          "proPlan": {
            "description": "Pro plan config",
            "allOf": [
              {
                "$ref": "#/components/schemas/PlanConfig"
              }
            ]
          },
          "ultraPlan": {
            "description": "Ultra plan config",
            "allOf": [
              {
                "$ref": "#/components/schemas/PlanConfig"
              }
            ]
          }
        },
        "required": [
          "id",
          "name",
          "favorite",
          "enableLimitsToAPIs",
          "createdAt",
          "updatedAt",
          "tenantId",
          "apis"
        ]
      },
      "ProjectApiDetailsDto": {
        "type": "object",
        "properties": {
          "api_id": {
            "type": "string",
            "description": "Unique identifier for the API",
            "example": "weather-api-v2"
          },
          "project_id": {
            "type": "number",
            "description": "Project ID that this API belongs to",
            "example": 123
          },
          "name": {
            "type": "string",
            "description": "Display name of the API",
            "example": "Weather Forecast API"
          },
          "path": {
            "type": "string",
            "description": "Path for accessing the API",
            "example": "/api/v2/weather"
          },
          "target_url": {
            "type": "string",
            "description": "Target URL where the request will be forwarded",
            "example": "https://weather-service.internal.com/v2/forecast"
          },
          "method": {
            "type": "string",
            "description": "HTTP method for the API",
            "example": "GET",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "DELETE",
              "PATCH"
            ]
          },
          "version": {
            "type": "string",
            "description": "Version of the API",
            "example": "2.0.0"
          },
          "description": {
            "type": "string",
            "description": "Description of the API",
            "example": "Get current weather conditions and forecasts for any location worldwide"
          },
          "required_subscription": {
            "type": "string",
            "description": "Required subscription level",
            "example": "basic"
          },
          "documentation_url": {
            "type": "string",
            "description": "URL to the API documentation",
            "example": "https://docs.weather-api.com/v2/forecast"
          },
          "required_headers": {
            "description": "Required headers for the API",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HeaderParameterDto"
            }
          },
          "status": {
            "type": "string",
            "description": "Status of the API",
            "example": "ACTIVE",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "DEPRECATED"
            ]
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "When the API was created",
            "example": "2023-01-01T00:00:00Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "When the API was last updated",
            "example": "2023-01-01T00:00:00Z"
          },
          "parameters": {
            "description": "Parameters for the API",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParameterDto"
            }
          }
        },
        "required": [
          "api_id",
          "project_id",
          "name",
          "path",
          "target_url",
          "method",
          "version",
          "required_headers",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "UpdateProjectDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Project name",
            "example": "Updated API Project"
          },
          "description": {
            "type": "string",
            "description": "Project description",
            "example": "Updated description"
          },
          "target_url": {
            "type": "string",
            "description": "Target Url",
            "example": "https://jsonplaceholder.typicode.com/posts"
          },
          "thumbnail": {
            "type": "string",
            "description": "Project thumbnail URL",
            "example": "https://example.com/new-image.png"
          },
          "favorite": {
            "type": "boolean",
            "description": "Mark project as favorite",
            "default": false
          },
          "enableLimitsToAPIs": {
            "type": "boolean",
            "description": "Enable limits to APIs",
            "default": false
          },
          "status": {
            "type": "string",
            "description": "Project status",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "DELETED"
            ]
          },
          "logo": {
            "type": "string",
            "description": "Logo URL",
            "example": "https://example.com/logo.png"
          },
          "category": {
            "type": "string",
            "description": "API category",
            "example": "Finance"
          },
          "shortDescription": {
            "type": "string",
            "description": "Short description of the API",
            "example": "Short summary..."
          },
          "longDescription": {
            "type": "string",
            "description": "Long description of the API",
            "example": "Detailed overview of your API and how it works."
          },
          "website": {
            "type": "string",
            "description": "API provider website URL",
            "example": "https://provider.com"
          },
          "termsOfUse": {
            "type": "string",
            "description": "Terms of use for this API",
            "example": "https://provider.com/terms"
          },
          "requestSizeLimitMb": {
            "type": "number",
            "description": "Maximum request size in MB",
            "example": 10
          },
          "proxyTimeoutSeconds": {
            "type": "number",
            "description": "Proxy timeout in seconds",
            "example": 60
          },
          "healthCheckUrl": {
            "type": "string",
            "description": "URL used for health checks",
            "example": "https://provider.com/health"
          },
          "apiDocumentation": {
            "type": "string",
            "description": "URL to API documentation",
            "example": "https://docs.provider.com"
          },
          "proxySecret": {
            "type": "string",
            "description": "Proxy secret for request authentication",
            "example": "super-secret-key"
          },
          "visibleToPublic": {
            "type": "boolean",
            "description": "Public visibility",
            "example": true
          },
          "basicPlan": {
            "description": "Basic plan config",
            "allOf": [
              {
                "$ref": "#/components/schemas/PlanConfig"
              }
            ]
          },
          "proPlan": {
            "description": "Pro plan config",
            "allOf": [
              {
                "$ref": "#/components/schemas/PlanConfig"
              }
            ]
          },
          "ultraPlan": {
            "description": "Ultra plan config",
            "allOf": [
              {
                "$ref": "#/components/schemas/PlanConfig"
              }
            ]
          }
        }
      },
      "HubListingDto": {
        "type": "object",
        "properties": {
          "logo": {
            "type": "string",
            "description": "URL of the logo image",
            "example": "https://example.com/logo.png"
          },
          "category": {
            "type": "string",
            "description": "Category of the API",
            "example": "Finance"
          },
          "shortDescription": {
            "type": "string",
            "description": "Short description of the API",
            "example": "Short summary about your API"
          },
          "longDescription": {
            "type": "string",
            "description": "Long description of the API",
            "example": "Detailed overview of your API and how it works."
          },
          "website": {
            "type": "string",
            "description": "API provider website URL",
            "example": "https://provider.com"
          },
          "termsOfUse": {
            "type": "string",
            "description": "Terms of use for this API",
            "example": "https://provider.com/terms"
          },
          "visibleToPublic": {
            "type": "boolean",
            "description": "Whether this API is visible to the public",
            "example": true
          },
          "healthCheckUrl": {
            "type": "string",
            "description": "URL used for health checks",
            "example": "https://provider.com/health"
          },
          "apiDocumentation": {
            "type": "string",
            "description": "URL to API documentation",
            "example": "https://docs.provider.com"
          },
          "proxySecret": {
            "type": "string",
            "description": "Proxy secret for request authentication",
            "example": "super-secret-key"
          },
          "requestSizeLimitMb": {
            "type": "number",
            "description": "Maximum request size in MB",
            "example": 10
          },
          "proxyTimeoutSeconds": {
            "type": "number",
            "description": "Proxy timeout in seconds",
            "example": 60
          },
          "basicPlan": {
            "description": "Configuration for basic plan",
            "allOf": [
              {
                "$ref": "#/components/schemas/PlanConfig"
              }
            ]
          },
          "proPlan": {
            "description": "Configuration for pro plan",
            "allOf": [
              {
                "$ref": "#/components/schemas/PlanConfig"
              }
            ]
          },
          "ultraPlan": {
            "description": "Configuration for ultra plan",
            "allOf": [
              {
                "$ref": "#/components/schemas/PlanConfig"
              }
            ]
          },
          "projectId": {
            "type": "number",
            "description": "Associated project ID",
            "example": 123
          }
        },
        "required": [
          "category",
          "visibleToPublic",
          "projectId"
        ]
      },
      "MarketplaceProviderDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Provider ID",
            "example": "provider-123"
          },
          "name": {
            "type": "string",
            "description": "Provider name",
            "example": "Weather Corp"
          },
          "logo": {
            "type": "string",
            "description": "Provider logo URL",
            "example": "https://example.com/logo.png"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "MarketplaceApiDto": {
        "type": "object",
        "properties": {
          "api_id": {
            "type": "string",
            "description": "API ID",
            "example": "weather-api-v1"
          },
          "name": {
            "type": "string",
            "description": "API name",
            "example": "Weather Forecast API"
          },
          "description": {
            "type": "string",
            "description": "API description",
            "example": "Get current weather conditions and forecasts"
          },
          "category": {
            "type": "string",
            "description": "API category",
            "example": "data"
          },
          "provider": {
            "description": "API provider information",
            "allOf": [
              {
                "$ref": "#/components/schemas/MarketplaceProviderDto"
              }
            ]
          },
          "path": {
            "type": "string",
            "description": "API path",
            "example": "/api/v1/weather"
          },
          "method": {
            "type": "string",
            "description": "HTTP method",
            "example": "GET"
          },
          "version": {
            "type": "string",
            "description": "API version",
            "example": "1.0.0"
          },
          "documentation_url": {
            "type": "string",
            "description": "Documentation URL",
            "example": "https://docs.weather-api.com"
          },
          "status": {
            "type": "string",
            "description": "API status",
            "example": "ACTIVE"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date",
            "example": "2023-01-01T00:00:00Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update date",
            "example": "2023-01-01T00:00:00Z"
          }
        },
        "required": [
          "api_id",
          "name",
          "description",
          "category",
          "provider",
          "path",
          "method",
          "version",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "MarketplaceApiListResponseDto": {
        "type": "object",
        "properties": {
          "apis": {
            "description": "List of APIs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketplaceApiDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of APIs",
            "example": 150
          },
          "page": {
            "type": "number",
            "description": "Current page",
            "example": 1
          },
          "limit": {
            "type": "number",
            "description": "Items per page",
            "example": 20
          },
          "total_pages": {
            "type": "number",
            "description": "Total number of pages",
            "example": 8
          }
        },
        "required": [
          "apis",
          "total",
          "page",
          "limit",
          "total_pages"
        ]
      },
      "MarketplaceApiDetailsDto": {
        "type": "object",
        "properties": {
          "api_id": {
            "type": "string",
            "description": "API ID",
            "example": "weather-api-v1"
          },
          "name": {
            "type": "string",
            "description": "API name",
            "example": "Weather Forecast API"
          },
          "description": {
            "type": "string",
            "description": "API description",
            "example": "Get current weather conditions and forecasts"
          },
          "category": {
            "type": "string",
            "description": "API category",
            "example": "data"
          },
          "provider": {
            "description": "API provider information",
            "allOf": [
              {
                "$ref": "#/components/schemas/MarketplaceProviderDto"
              }
            ]
          },
          "path": {
            "type": "string",
            "description": "API path",
            "example": "/api/v1/weather"
          },
          "method": {
            "type": "string",
            "description": "HTTP method",
            "example": "GET"
          },
          "version": {
            "type": "string",
            "description": "API version",
            "example": "1.0.0"
          },
          "documentation_url": {
            "type": "string",
            "description": "Documentation URL",
            "example": "https://docs.weather-api.com"
          },
          "status": {
            "type": "string",
            "description": "API status",
            "example": "ACTIVE"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date",
            "example": "2023-01-01T00:00:00Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update date",
            "example": "2023-01-01T00:00:00Z"
          },
          "required_subscription": {
            "type": "string",
            "description": "Required subscription level",
            "example": "basic"
          },
          "required_headers": {
            "type": "array",
            "description": "Required headers",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                },
                "is_variable": {
                  "type": "boolean"
                }
              }
            }
          },
          "parameters": {
            "type": "array",
            "description": "API parameters",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "required": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "required": [
          "api_id",
          "name",
          "description",
          "category",
          "provider",
          "path",
          "method",
          "version",
          "status",
          "created_at",
          "updated_at",
          "required_subscription",
          "required_headers",
          "parameters"
        ]
      },
      "MarketplaceCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Category name",
            "example": "ai"
          },
          "display_name": {
            "type": "string",
            "description": "Category display name",
            "example": "Artificial Intelligence"
          },
          "api_count": {
            "type": "number",
            "description": "Number of APIs in this category",
            "example": 15
          }
        },
        "required": [
          "name",
          "display_name",
          "api_count"
        ]
      },
      "NewsletterSubscribeDto": {
        "type": "object",
        "properties": {}
      }
    }
  }
}