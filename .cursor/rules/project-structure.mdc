---
description: Project structure and file organization guidelines for Veil
globs: *
alwaysApply: false
---
# Project Structure

## Main Structure

Veil is a Caddy web server extension that helps to dynamically onboard APIs and makes Caddy act as a reverse proxy while checking subscription status.

```tree
.
├── docs/             # Documentation
├── packages/         # Core code packages
│   ├── caddy/        # Caddy extension
│   │   ├── internal/ # Internal implementation
│   │   │   ├── config/    # Configuration management
│   │   │   ├── dto/       # Data transfer objects
│   │   │   ├── handlers/  # HTTP handlers
│   │   │   ├── models/    # Data models
│   │   │   └── store/     # Database operations
│   │   ├── module.go      # Caddy module registration
│   │   └── go.mod         # Go module definition
│   ├── platform/     # Platform utilities
│   │   ├── api/      # API helpers
│   │   └── log/      # Logging utilities
│   └── server/       # Server components
│       └── data/     # Data utilities
├── configs/          # Configuration templates
├── tests/            # Test fixtures and utilities
├── scripts/          # Utility scripts
├── .github/          # GitHub workflows and templates
└── (config files)    # Various configuration files
```

## File Organization

- Use PascalCase for Go types, interfaces, and exported functions
- Use camelCase for unexported functions and variables
- Use snake_case for file names and directories
- Use the following organization for modules:
  - `/internal` - Code that's not intended to be imported by other packages
  - `/models` - Data models and domain types
  - `/handlers` - HTTP handlers
  - `/store` - Database operations
  - `/config` - Configuration structures
  - `/dto` - Data Transfer Objects

## Module Organization

Every module should follow these principles:

1. Clear package structure with descriptive names
2. Minimal dependencies between packages
3. Interfaces defined at the boundaries of packages
4. Tests located next to the code they test

## Caddy Extension Guidelines

- New Caddy modules should implement the required Caddy interfaces:
  - `caddy.Module`
  - `caddy.Provisioner`
  - `caddy.App` (for app modules)
  - `caddyhttp.MiddlewareHandler` (for HTTP handlers)
  
- Module registration must be done in the `init()` function
- Configuration should be handled through the `Provision` method
- Cleanup should be handled in the `Stop` method 