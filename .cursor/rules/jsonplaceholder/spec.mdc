---
description: 
globs: 
alwaysApply: false
---
# JSONPlaceholder API Guide

This guide provides examples for using the JSONPlaceholder API with the Fetch API. You can copy and paste these code snippets into your browser console to quickly test the functionality.

## Getting a Resource

Retrieve a specific resource by its ID:

```javascript
fetch('https://jsonplaceholder.typicode.com/posts/1')
  .then((response) => response.json())
  .then((json) => console.log(json));
```

**Output:**
```json
{
  "id": 1,
  "title": "...",
  "body": "...",
  "userId": 1
}
```

## Listing All Resources

Get a list of all resources of a specific type:

```javascript
fetch('https://jsonplaceholder.typicode.com/posts')
  .then((response) => response.json())
  .then((json) => console.log(json));
```

**Output:**
```json
[
  {
    "id": 1,
    "title": "..."
    /* ... */
  },
  {
    "id": 2,
    "title": "..."
    /* ... */
  },
  {
    "id": 3,
    "title": "..."
    /* ... */
  },
  /* ... */
  {
    "id": 100,
    "title": "..."
    /* ... */
  }
]
```

## Creating a Resource

Create a new resource using POST:

```javascript
fetch('https://jsonplaceholder.typicode.com/posts', {
  method: 'POST',
  body: JSON.stringify({
    title: 'foo',
    body: 'bar',
    userId: 1,
  }),
  headers: {
    'Content-type': 'application/json; charset=UTF-8',
  },
})
  .then((response) => response.json())
  .then((json) => console.log(json));
```

**Output:**
```json
{
  "id": 101,
  "title": "foo",
  "body": "bar",
  "userId": 1
}
```

> **Important:** The resource will not be really created on the server but it will be faked as if.

## Updating a Resource

Update an existing resource using PUT:

```javascript
fetch('https://jsonplaceholder.typicode.com/posts/1', {
  method: 'PUT',
  body: JSON.stringify({
    id: 1,
    title: 'foo',
    body: 'bar',
    userId: 1,
  }),
  headers: {
    'Content-type': 'application/json; charset=UTF-8',
  },
})
  .then((response) => response.json())
  .then((json) => console.log(json));
```

**Output:**
```json
{
  "id": 1,
  "title": "foo",
  "body": "bar",
  "userId": 1
}
```

> **Important:** The resource will not be really updated on the server but it will be faked as if.

## Patching a Resource

Partially update a resource using PATCH:

```javascript
fetch('https://jsonplaceholder.typicode.com/posts/1', {
  method: 'PATCH',
  body: JSON.stringify({
    title: 'foo',
  }),
  headers: {
    'Content-type': 'application/json; charset=UTF-8',
  },
})
  .then((response) => response.json())
  .then((json) => console.log(json));
```

**Output:**
```json
{
  "id": 1,
  "title": "foo",
  "body": "...",
  "userId": 1
}
```

> **Important:** The resource will not be really updated on the server but it will be faked as if.

## Deleting a Resource

Delete a resource:

```javascript
fetch('https://jsonplaceholder.typicode.com/posts/1', {
  method: 'DELETE',
});
```

> **Important:** The resource will not be really deleted on the server but it will be faked as if.

## Filtering Resources

Basic filtering is supported through query parameters:

```javascript
// This will return all the posts that belong to the first user
fetch('https://jsonplaceholder.typicode.com/posts?userId=1')
  .then((response) => response.json())
  .then((json) => console.log(json));
```

## Listing Nested Resources

One level of nested route is available:

```javascript
// This is equivalent to /comments?postId=1
fetch('https://jsonplaceholder.typicode.com/posts/1/comments')
  .then((response) => response.json())
  .then((json) => console.log(json));
```

### Available Nested Routes

- `/posts/1/comments`
- `/albums/1/photos`
- `/users/1/albums`
- `/users/1/todos`
- `/users/1/posts`